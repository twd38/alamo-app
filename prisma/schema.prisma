datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}
 
model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdJobs   Job[]           @relation(name: "CreatedByRelation")
  ownedJobs     Job[]           @relation(name: "OwnerRelation")
  assignedJobs  JobAssignee[] 
  createdTasks  Task[]           @relation(name: "CreatedByRelation")
  assignedTasks Task[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
enum Status {
  paused
  todo
  in_progress
  completed
  scrapped
}

model File {
  id          String @id @default(cuid())
  url         String
  name        String
  type        String
  size        Int
  jobId       String?
  job         Job?    @relation(fields: [jobId], references: [id])
  taskId      String?
  task        Task?   @relation(fields: [taskId], references: [id])
  partId      String?
  part        Part?   @relation("PartFiles", fields: [partId], references: [id])
  partImagePart Part? @relation("PartImage")
  deletedOn   DateTime?
}

model Job {
  id            String @id @default(cuid())
  jobNumber     String
  partName      String
  operation     String
  status        Status
  timeEstimate  String
  dueDate       String
  imageUrl      String
  createdById   String
  createdBy     User   @relation(fields: [createdById], references: [id], name: "CreatedByRelation")
  ownerId       String
  owner         User   @relation(fields: [ownerId], references: [id], name: "OwnerRelation")
  assignees     JobAssignee[]   
  workStationId String?
  workStation   WorkStation? @relation(fields: [workStationId], references: [id])
  files         File[]
  deletedOn     DateTime?
}

model JobAssignee {
  jobId  String
  job    Job   @relation(fields: [jobId], references: [id])
  userId String
  user   User  @relation(fields: [userId], references: [id])

  @@id([jobId, userId]) // Composite primary key
}

model Task {
  id            String @id @default(cuid())
  name          String
  taskNumber    String
  status        Status
  dueDate       DateTime
  description   String
  createdById   String
  createdBy     User   @relation(fields: [createdById], references: [id], name: "CreatedByRelation")
  assignees     User[]   
  workStationId String?
  workStation   WorkStation? @relation(fields: [workStationId], references: [id])
  files         File[]
  deletedOn     DateTime?
  taskOrder     Int @default(0)
}

model WorkStation {
  id          String @id @default(cuid())
  name        String
  kanbanOrder Int
  jobs        Job[]
  tasks       Task[]
  deletedOn   DateTime?
}
 
model MissionMessage {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Parts and Inventory

model Part {
  id          String  @id @default(uuid())
  partNumber  String  @unique
  category    PartCategory?
  description String
  unit        String
  trackingType TrackingType
  partImageId String? @unique
  partImage   File?   @relation("PartImage", fields: [partImageId], references: [id])
  files       File[]  @relation("PartFiles")
  bomParts    BOMPart[] @relation("BOMParts")
  basePartTo   BOMPart[] @relation("BOMBasePart")
  inventory   Inventory[]
  transactions InventoryTransaction[]
}

enum PartCategory {
  ASSEMBLY_400
  MODULE_300
  SUBASSEMBLY_200
  PART_100
  RAW_000
  BIN
  SHIP
} 

enum TrackingType {
  SERIAL
  BATCH
  LOT
}

model BOMPart {
  id              String @id @default(uuid())
  parentPartId    String?
  parentPart      Part? @relation("BOMParts", fields: [parentPartId], references: [id])
  partId          String?
  part            Part? @relation("BOMBasePart", fields: [partId], references: [id])
  qty             Int
  bomType         BOMType
}

enum BOMType {
  ENGINEERING
  MANUFACTURING
}

model Inventory {
  id           String @id @default(uuid())
  partId       String
  part         Part   @relation(fields: [partId], references: [id])
  locationId   String
  location     Location @relation(fields: [locationId], references: [id])
  qty     Int // Bulk parts tracked by quantity
  serialNumber String? @unique // Serialized parts track unique numbers
}

model InventoryTransaction {
  id            String @id @default(uuid())
  timestamp     DateTime @default(now())
  partId        String
  part          Part @relation(fields: [partId], references: [id])
  fromLocationId String?
  fromLocation  Location? @relation("FromLocation", fields: [fromLocationId], references: [id])
  toLocationId  String?
  toLocation    Location? @relation("ToLocation", fields: [toLocationId], references: [id])
  qty      Int
  transactionType TransactionType
  referenceId   String? // Link to WorkOrder, PurchaseOrder, etc.
}

model Location {
  id             String  @id @default(uuid())
  name           String
  type           LocationType
  parentLocationId String?  @unique
  parentLocation Location?  @relation("LocationHierarchy", fields: [parentLocationId], references: [id])
  subLocations   Location[] @relation("LocationHierarchy")
  fromTransactions InventoryTransaction[] @relation("FromLocation")
  toTransactions   InventoryTransaction[] @relation("ToLocation")
  inventoryParts Inventory[]
}

enum LocationType {
  WAREHOUSE
  AISLE
  SHELF
  BIN
  CONTAINER
  SHIPPING
  WIP
}

enum TransactionType {
  PURCHASE_RECEIPT
  PRODUCTION_ISSUE
  PRODUCTION_RETURN
  MOVE
  ADJUSTMENT
  SHIPMENT
}