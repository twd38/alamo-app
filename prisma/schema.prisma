datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}
 
model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdJobs   Job[]           @relation(name: "CreatedByRelation")
  ownedJobs     Job[]           @relation(name: "OwnerRelation")
  assignedJobs  JobAssignee[] 
  createdTasks  Task[]           @relation(name: "CreatedByRelation")
  assignedTasks Task[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
enum Status {
  paused
  todo
  in_progress
  completed
  scrapped
}

model File {
  id          String @id @default(cuid())
  url         String
  name        String
  type        String
  size        Int
  jobId       String?
  job         Job?    @relation(fields: [jobId], references: [id])
  taskId      String?
  task        Task?   @relation(fields: [taskId], references: [id])
  deletedOn   DateTime?
}

model Job {
  id            String @id @default(cuid())
  jobNumber     String
  partName      String
  operation     String
  status        Status
  timeEstimate  String
  dueDate       String
  imageUrl      String
  createdById   String
  createdBy     User   @relation(fields: [createdById], references: [id], name: "CreatedByRelation")
  ownerId       String
  owner         User   @relation(fields: [ownerId], references: [id], name: "OwnerRelation")
  assignees     JobAssignee[]   
  workStationId String?
  workStation   WorkStation? @relation(fields: [workStationId], references: [id])
  files         File[]
  deletedOn     DateTime?
}

model JobAssignee {
  jobId  String
  job    Job   @relation(fields: [jobId], references: [id])
  userId String
  user   User  @relation(fields: [userId], references: [id])

  @@id([jobId, userId]) // Composite primary key
}

model Task {
  id            String @id @default(cuid())
  name          String
  taskNumber    String
  status        Status
  dueDate       DateTime
  description   String
  createdById   String
  createdBy     User   @relation(fields: [createdById], references: [id], name: "CreatedByRelation")
  assignees     User[]   
  workStationId String?
  workStation   WorkStation? @relation(fields: [workStationId], references: [id])
  files         File[]
  deletedOn     DateTime?
  taskOrder     Int @default(0)
}

model WorkStation {
  id          String @id @default(cuid())
  name        String
  kanbanOrder Int
  jobs        Job[]
  tasks       Task[]
  deletedOn   DateTime?
}
 
model MissionMessage {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}