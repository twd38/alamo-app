generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String               @id @default(cuid())
  email                 String               @unique
  name                  String
  password              String?              // For credentials auth
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  createdBoards         Board[]              @relation("CreatedBoards")
  boardViews            BoardView[]
  createdWorkOrders     WorkOrder[]          @relation("CreatedByRelation")
  assignedWorkOrders    WorkOrderAssignee[]
  sessions              Session[]
  createdTasks          Task[]               @relation("CreatedByRelation")
  approvedInstructions  WorkInstruction[]    @relation("ApprovedInstructions")
  createdInstructions   WorkInstruction[]
  collaboratingBoards   Board[]              @relation("BoardCollaborators")
  assignedTasks         Task[]               @relation("TaskToUser")
  receivedNotifications Notification[]       @relation("NotificationRecipient")
  sentNotifications     Notification[]       @relation("NotificationActor")
  workOrderTimeEntries  WorkOrderTimeEntry[]
  accessBadge           AccessBadge?
  createdAccessBadges   AccessBadge[]        @relation("CreatedAccessBadges")
  clockInEntries        ClockInEntry[]
  
  // RBAC relationships
  userRoles             UserRole[]
  userPermissions       UserPermission[]
  assignedRoles         UserRole[]           @relation("AssignedRoles")
  assignedPermissions   UserPermission[]     @relation("AssignedPermissions")
  
  // Comments relationship
  comments              Comment[]            @relation("CommentAuthor")
  
  // Work Order Operation relationships
  assignedOperations    WorkOrderOperation[] @relation("OperationAssignee")
  setupOperations       WorkOrderOperation[] @relation("OperationSetupBy")
  completedOperations   WorkOrderOperation[] @relation("OperationCompletedBy")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model File {
  id              String                     @id @default(cuid())
  url             String
  workOrderId     String?
  taskId          String?
  deletedOn       DateTime?
  name            String
  size            Int
  type            String
  partId          String?
  stepId          String?
  stepFileId      String?
  workOrderWorkInstructionStepId String?
  commentId       String?
  key             String                     @default("")
  workOrder       WorkOrder?                 @relation(fields: [workOrderId], references: [id])
  part            Part?                      @relation("PartFiles", fields: [partId], references: [id])
  step            WorkInstructionStep?       @relation("StepImages", fields: [stepId], references: [id])
  stepFile        WorkInstructionStep?       @relation("StepFiles", fields: [stepFileId], references: [id])
  workOrderWorkInstructionStep WorkOrderWorkInstructionStep? @relation("WorkOrderWorkInstructionStepFiles", fields: [workOrderWorkInstructionStepId], references: [id])
  task            Task?                      @relation(fields: [taskId], references: [id])
  comment         Comment?                   @relation("CommentFiles", fields: [commentId], references: [id])
  partImagePart   Part?                      @relation("PartImage")
  partCADFile     Part?                      @relation("PartCADFile")
  partGLTFFile    Part?                      @relation("PartGLTFFile")
  action          WorkInstructionStepAction? @relation("ActionUpload")
  workOrderAction WorkOrderWorkInstructionStepAction? @relation("WorkOrderActionUpload")
  workOrderActionExecution WorkOrderWorkInstructionStepAction? @relation("ActionExecutionFileUpload")
}

model WorkOrder {
  id              String                   @id @default(cuid())
  workOrderNumber String
  operation       String
  status          WorkOrderStatus
  dueDate         DateTime?
  createdById     String
  deletedOn       DateTime?
  labelsPrinted   Boolean                  @default(false) // Track if labels have been printed
  files           File[]
  createdBy       User                     @relation("CreatedByRelation", fields: [createdById], references: [id])
  assignees       WorkOrderAssignee[]
  partId          String
  partQty         Int
  part            Part                     @relation(fields: [partId], references: [id])
  notes           String?
  timeTaken       Int?                     @default(0) // Time taken in milliseconds
  clockInEntries  ClockInEntry[]
  timeEntries     WorkOrderTimeEntry[]
  workInstruction WorkOrderWorkInstruction?
  workOrderRouting WorkOrderRouting?       // New: Link to routing-based work order
  tags            WorkOrderTag[]           @relation("WorkOrderToWorkOrderTag")
}

model WorkOrderAssignee {
  workOrderId String
  userId      String
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@id([workOrderId, userId])
}

model Task {
  id              String         @id @default(cuid())
  name            String
  taskNumber      String
  description     String
  createdById     String
  dueDate         DateTime
  deletedOn       DateTime?
  taskOrder       Int            @default(0)
  kanbanSectionId String?
  priority        Int            @default(0)
  projectId       String?
  private         Boolean        @default(false)
  boardId         String?
  epicId          String?
  files           File[]
  board           Board?         @relation(fields: [boardId], references: [id])
  createdBy       User           @relation("CreatedByRelation", fields: [createdById], references: [id])
  epic            Epic?          @relation(fields: [epicId], references: [id])
  kanbanSection   KanbanSection? @relation(fields: [kanbanSectionId], references: [id])
  project         Project?       @relation(fields: [projectId], references: [id])
  Task_A          Task[]         @relation("TaskDependencies")
  Task_B          Task[]         @relation("TaskDependencies")
  tags            TaskTag[]      @relation("TaskToTaskTag")
  assignees       User[]         @relation("TaskToUser")
}

model TaskTag {
  id      String  @id @default(cuid())
  name    String
  boardId String?
  color   Color   @default(slate)
  board   Board?  @relation(fields: [boardId], references: [id])
  tasks   Task[]  @relation("TaskToTaskTag")

  @@unique([name, boardId])
}

model WorkOrderTag {
  id         String      @id @default(cuid())
  name       String      @unique
  color      Color       @default(slate)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  workOrders WorkOrder[] @relation("WorkOrderToWorkOrderTag")
}

model Project {
  id    String  @id @default(cuid())
  name  String
  color String? @default("bg-gray-500")
  tasks Task[]
}

model KanbanSection {
  id          String    @id @default(cuid())
  name        String
  kanbanOrder Int
  deletedOn   DateTime?
  boardId     String?
  board       Board?    @relation(fields: [boardId], references: [id])
  tasks       Task[]

  @@unique([name, boardId])
}

model Board {
  id            String          @id @default(cuid())
  name          String
  createdById   String
  private       Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  icon          String?
  createdBy     User            @relation("CreatedBoards", fields: [createdById], references: [id])
  views         BoardView[]
  epics         Epic[]
  sections      KanbanSection[]
  tasks         Task[]
  tags          TaskTag[]
  collaborators User[]          @relation("BoardCollaborators")
}

model BoardView {
  id          String   @id @default(cuid())
  name        String
  filters     Json
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  boardId     String
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model MissionMessage {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Part {
  id               String                 @id @default(uuid())
  partNumber       String                 @unique
  supplierPartNumber String?
  name             String                 @default("")
  description      String                 @default("")
  partImageId      String?                @unique
  cadFileId        String?                @unique
  gltfFileId       String?                @unique
  apsUrn           String?                @unique // Autodesk Platform Services URN for 3D viewer
  partRevision     String                 @default("A")
  trackingType     TrackingType           @default(SERIAL)
  partType         PartType               @default(RAW_000)
  unit             String                 @default("EA")
  basePartNumber   String?                @unique
  versionNumber    String                 @default("1")
  nxFilePath       String?
  bomParts         BOMPart[]              @relation("BOMParts")
  basePartTo       BOMPart[]              @relation("BOMBasePart")
  files            File[]                 @relation("PartFiles")
  inventory        Inventory[]
  transactions     InventoryTransaction[]
  revisionParentId String?
  revisionParent   Part?                  @relation("PartRevisions", fields: [revisionParentId], references: [id])
  revisions        Part[]                 @relation("PartRevisions")
  parentVersionId  String?
  parentVersion    Part?                  @relation("PartVersions", fields: [parentVersionId], references: [id])
  childVersions    Part[]                 @relation("PartVersions")
  partImage        File?                  @relation("PartImage", fields: [partImageId], references: [id])
  cadFile          File?                  @relation("PartCADFile", fields: [cadFileId], references: [id])
  gltfFile         File?                  @relation("PartGLTFFile", fields: [gltfFileId], references: [id])
  workInstructions WorkInstruction[]
  workOrders       WorkOrder[]
  routings         Routing[]
  partRoutings     PartRouting[]

  @@unique([partNumber, partRevision])
}

model BOMPart {
  id           String  @id @default(uuid())
  qty          Int
  bomType      BOMType
  parentPartId String?
  partId       String?
  parentPart   Part?   @relation("BOMParts", fields: [parentPartId], references: [id])
  part         Part?   @relation("BOMBasePart", fields: [partId], references: [id])
}

model Inventory {
  id           String   @id @default(uuid())
  locationId   String
  serialNumber String?  @unique
  qty          Int
  partId       String
  location     Location @relation(fields: [locationId], references: [id])
  part         Part     @relation(fields: [partId], references: [id])
}

model InventoryTransaction {
  id              String          @id @default(uuid())
  timestamp       DateTime        @default(now())
  fromLocationId  String?
  toLocationId    String?
  transactionType TransactionType
  referenceId     String?
  qty             Int
  partId          String
  fromLocation    Location?       @relation("FromLocation", fields: [fromLocationId], references: [id])
  part            Part            @relation(fields: [partId], references: [id])
  toLocation      Location?       @relation("ToLocation", fields: [toLocationId], references: [id])
}

model Location {
  id               String                 @id @default(uuid())
  name             String
  type             LocationType
  parentLocationId String?                @unique
  inventoryParts   Inventory[]
  fromTransactions InventoryTransaction[] @relation("FromLocation")
  toTransactions   InventoryTransaction[] @relation("ToLocation")
  parentLocation   Location?              @relation("LocationHierarchy", fields: [parentLocationId], references: [id])
  subLocations     Location?              @relation("LocationHierarchy")
}

model WorkInstruction {
  id                    String                @id @default(uuid())
  partId                String
  title                 String
  description           String?
  baseInstructionNumber String?               @unique
  versionNumber         String                @default("1")
  instructionNumber     String                @unique
  status                InstructionStatus     @default(DRAFT)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  createdById           String?
  approvedAt            DateTime?
  approvedById          String?
  parentVersionId       String?               @unique
  approvedBy            User?                 @relation("ApprovedInstructions", fields: [approvedById], references: [id])
  createdBy             User?                 @relation(fields: [createdById], references: [id])
  parentVersion         WorkInstruction?      @relation("WorkInstructionVersions", fields: [parentVersionId], references: [id])
  childVersions         WorkInstruction?      @relation("WorkInstructionVersions")
  part                  Part                  @relation(fields: [partId], references: [id])
  steps                 WorkInstructionStep[]
  workOrderInstructions WorkOrderWorkInstruction[] @relation("WorkOrderInstructionSource")
}

model WorkInstructionStep {
  id                  String                      @id @default(uuid())
  workInstructionId   String
  stepNumber          Int
  title               String
  instructions        String
  estimatedLabourTime Int
  requiredTools       String[]
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt
  images              File[]                      @relation("StepImages")
  files               File[]                      @relation("StepFiles")
  workInstruction     WorkInstruction             @relation(fields: [workInstructionId], references: [id], onDelete: Cascade)
  actions             WorkInstructionStepAction[]
  workOrderSteps      WorkOrderWorkInstructionStep[] @relation("WorkOrderStepSource")
}

model WorkInstructionStepAction {
  id               String                @id @default(uuid())
  stepId           String
  description      String
  notes            String?
  isRequired       Boolean               @default(true)
  signoffRoles     String[]
  targetValue      Float?
  tolerance        Float?
  unit             String?
  uploadedFileId   String?               @unique
  actionType       ActionType
  step             WorkInstructionStep   @relation(fields: [stepId], references: [id], onDelete: Cascade)
  uploadedFile     File?                 @relation("ActionUpload", fields: [uploadedFileId], references: [id])
  workOrderActions WorkOrderWorkInstructionStepAction[] @relation("WorkOrderActionSource")
}

// Work Order-specific Work Instructions (snapshots)
model WorkOrderWorkInstruction {
  id                      String                        @id @default(uuid())
  workOrderId             String                        @unique
  originalInstructionId   String?                       // Reference to source WorkInstruction
  title                   String
  description             String?
  createdAt               DateTime                      @default(now())
  updatedAt               DateTime                      @updatedAt
  
  // Relationships
  workOrder               WorkOrder                     @relation(fields: [workOrderId], references: [id], onDelete: Cascade)
  originalInstruction     WorkInstruction?              @relation("WorkOrderInstructionSource", fields: [originalInstructionId], references: [id])
  steps                   WorkOrderWorkInstructionStep[]
}

model WorkOrderWorkInstructionStep {
  id                        String                              @id @default(uuid())
  workOrderInstructionId    String
  originalStepId            String?                             // Reference to source WorkInstructionStep
  stepNumber                Int
  title                     String
  instructions              String
  estimatedLabourTime       Int
  requiredTools             String[]
  createdAt                 DateTime                            @default(now())
  updatedAt                 DateTime                            @updatedAt
  
  // Execution tracking (embedded)
  startedAt                 DateTime?
  completedAt               DateTime?
  timeTaken                 Int?                                // Time taken in seconds
  status                    StepExecutionStatus                 @default(PENDING)
  activeWorkers             Int                                 @default(0) // Track number of active workers on this step
  
  // Relationships
  workOrderInstruction      WorkOrderWorkInstruction            @relation(fields: [workOrderInstructionId], references: [id], onDelete: Cascade)
  originalStep              WorkInstructionStep?                @relation("WorkOrderStepSource", fields: [originalStepId], references: [id])
  actions                   WorkOrderWorkInstructionStepAction[]
  files                     File[]                              @relation("WorkOrderWorkInstructionStepFiles")
  
  @@index([workOrderInstructionId])
}

model WorkOrderWorkInstructionStepAction {
  id                    String                @id @default(uuid())
  stepId                String
  originalActionId      String?               // Reference to source WorkInstructionStepAction
  description           String
  notes                 String?
  isRequired            Boolean               @default(true)
  signoffRoles          String[]
  targetValue           Float?
  tolerance             Float?
  unit                  String?
  uploadedFileId        String?               @unique
  actionType            ActionType
  
  // Execution tracking (embedded)
  executedNumberValue   Float?                // For VALUE_INPUT actions
  executedBooleanValue  Boolean?              // For CHECKBOX actions
  executedStringValue   String?               // For future text-based actions
  executionNotes        String?
  completedAt           DateTime?
  completedBy           String?
  executionFileId       String?               @unique
  
  // Relationships
  step                  WorkOrderWorkInstructionStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
  originalAction        WorkInstructionStepAction?   @relation("WorkOrderActionSource", fields: [originalActionId], references: [id])
  uploadedFile          File?                        @relation("WorkOrderActionUpload", fields: [uploadedFileId], references: [id])
  executionFile         File?                        @relation("ActionExecutionFileUpload", fields: [executionFileId], references: [id])
  
  @@index([stepId])
}

model Order {
  id               String    @id @default(cuid())
  orderNumber      String    @unique
  supplier         String?
  dateOrdered      DateTime?
  estimatedArrival DateTime?
  deliveredAt      DateTime?
  status           String
  emailThreadIds   String[]
  metadata         Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model DevelopmentPlan {
  id                 String   @id @default(cuid())
  name               String
  imageUrl           String
  minimumLotArea     Float
  minimumLotWidth    Float
  minimumLotDepth    Float
  height             Float
  grossUnits         Float
  grossUnitsPerAcre  Float
  floorAreaRatio     Float
  buildingArea       Float
  imperviousCoverage Float
  alleyRequired      Boolean
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Parcel {
  id           String   @id @default(cuid())
  parcelNumber String   @unique
  address      String
  area         Float
  zoningId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  zoning       Zoning   @relation(fields: [zoningId], references: [id])
}

model Zoning {
  id          String   @id @default(cuid())
  zoningType  String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  parcels     Parcel[]
}

model Epic {
  id        String   @id @default(cuid())
  name      String
  color     String?  @default("bg-gray-500")
  boardId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  board     Board?   @relation(fields: [boardId], references: [id])
  tasks     Task[]

  @@unique([name, boardId])
}

model Notification {
  id          String           @id @default(cuid())
  recipientId String
  actorId     String?
  type        NotificationType
  link        String?
  linkText    String?
  message     String
  readAt      DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  recipient   User             @relation("NotificationRecipient", fields: [recipientId], references: [id])
  actor       User?            @relation("NotificationActor", fields: [actorId], references: [id])
}

enum Status {
  paused
  todo
  in_progress
  completed
  scrapped
}

enum Color {
  slate
  gray
  zinc
  neutral
  stone
  red
  orange
  amber
  yellow
  lime
  green
  emerald
  teal
  cyan
  sky
  blue
  indigo
  violet
  purple
  fuchsia
  pink
  rose
}

enum PartType {
  ASSEMBLY_400
  MODULE_300
  SUBASSEMBLY_200
  PART_100
  RAW_000
  BIN
  SHIP
}

enum WorkOrderStatus {
  DRAFT
  PAUSED
  HOLD
  TODO
  IN_PROGRESS
  COMPLETED
  SCRAPPED
}

enum TrackingType {
  SERIAL
  BATCH
  LOT
}

enum BOMType {
  ENGINEERING
  MANUFACTURING
}

enum LocationType {
  WAREHOUSE
  AISLE
  SHELF
  BIN
  CONTAINER
  SHIPPING
  WIP
}

enum TransactionType {
  PURCHASE_RECEIPT
  PRODUCTION_ISSUE
  PRODUCTION_RETURN
  MOVE
  ADJUSTMENT
  SHIPMENT
}

enum ActionType {
  VALUE_INPUT
  UPLOAD_IMAGE
  SIGNOFF
  CHECKBOX
  QUANTITY_INPUT
}

enum InstructionStatus {
  DRAFT
  REVIEW
  APPROVED
  DEPRECATED
}

enum NotificationType {
  MENTION
  ADDED
}

// Clock in entry for a user on a work order
model ClockInEntry {
  id            String    @id @default(uuid())
  userId        String
  clockInTime   DateTime
  clockOutTime  DateTime?
  workOrderId   String
  workOrder     WorkOrder @relation(fields: [workOrderId], references: [id])
  user          User      @relation(fields: [userId], references: [id])
}

model WorkOrderTimeEntry {
  id            String    @id @default(uuid())
  workOrderId   String
  userId        String
  startTime     DateTime
  stopTime      DateTime?
  workOrder     WorkOrder @relation(fields: [workOrderId], references: [id])
  user          User      @relation(fields: [userId], references: [id])

  @@unique([workOrderId, userId, startTime]) // Ensures no duplicate clock-ins for the same user
  @@index([workOrderId])
  @@index([userId])
}

enum StepExecutionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  SKIPPED
}

enum OperationStatus {
  PENDING
  SETUP
  RUNNING
  PAUSED
  COMPLETED
  SKIPPED
}

model AccessBadge {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiredAt DateTime?
  userId    String   @unique
  createdById String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdBy User     @relation("CreatedAccessBadges", fields: [createdById], references: [id])

  @@index([createdById])
}

// RBAC Models

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isSystemRole Boolean @default(false) // Prevents deletion of core system roles
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  userRoles       UserRole[]
  rolePermissions RolePermission[]
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  resource    String?  // e.g., "boards", "work_orders", "parts", "users", etc.
  action      String   // e.g., "create", "read", "update", "delete", "assign", etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  rolePermissions RolePermission[]
  userPermissions UserPermission[]
}

model UserRole {
  id       String  @id @default(cuid())
  userId   String
  roleId   String
  
  // Resource-specific role assignment (optional)
  resourceType String? // e.g., "board", "work_order", "part", etc.
  resourceId   String? // ID of the specific resource
  
  // Audit fields
  assignedAt DateTime @default(now())
  assignedBy String?
  expiresAt  DateTime? // For temporary role assignments
  
  // Relationships
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  assignedByUser User? @relation("AssignedRoles", fields: [assignedBy], references: [id])
  
  @@unique([userId, roleId, resourceType, resourceId])
  @@index([userId])
  @@index([roleId])
  @@index([resourceType, resourceId])
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String
  
  // Relationships
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
}

model UserPermission {
  id           String @id @default(cuid())
  userId       String
  permissionId String
  
  // Resource-specific permission (optional)
  resourceType String? // e.g., "board", "work_order", "part", etc.
  resourceId   String? // ID of the specific resource
  
  // Grant/Deny flag (true = grant, false = deny)
  granted Boolean @default(true)
  
  // Audit fields
  assignedAt DateTime @default(now())
  assignedBy String?
  expiresAt  DateTime? // For temporary permissions
  
  // Relationships
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  assignedByUser User? @relation("AssignedPermissions", fields: [assignedBy], references: [id])
  
  @@unique([userId, permissionId, resourceType, resourceId])
  @@index([userId])
  @@index([permissionId])
  @@index([resourceType, resourceId])
}

model Comment {
  id              String               @id @default(cuid())
  content         String
  authorId        String
  entityType      CommentableEntityType
  entityId        String
  parentId        String?              // For threaded comments/replies
  mentionedUserIds String[]            // Array of user IDs mentioned in the comment
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  deletedAt       DateTime?            // Soft delete
  
  author      User                 @relation("CommentAuthor", fields: [authorId], references: [id])
  parent      Comment?             @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[]            @relation("CommentReplies")
  files       File[]               @relation("CommentFiles")
  
  @@index([entityType, entityId])
  @@index([authorId])
  @@index([createdAt])
  @@index([deletedAt])
}

enum CommentableEntityType {
  WORK_ORDER
  TASK
  PART
  WORK_INSTRUCTION
  WORK_INSTRUCTION_STEP
  WORK_ORDER_WORK_INSTRUCTION_STEP
  BOARD
  EPIC
}

// MES Phase 1: Core Tables

model WorkCenter {
  id               String            @id @default(uuid())
  code             String            @unique
  name             String
  description      String?
  type             WorkCenterType
  capacity         Float             @default(1) // Units per hour
  efficiency       Float             @default(1) // 0-1 efficiency factor
  setupTime        Int               @default(0) // Setup time in minutes
  isActive         Boolean           @default(true)
  costPerHour      Float             @default(0)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  // Relationships
  operations       Operation[]
  routingSteps     RoutingStep[]
  workOrderOperations WorkOrderOperation[]
}

model Operation {
  id               String            @id @default(uuid())
  code             String            @unique
  name             String
  description      String?
  workCenterId     String
  defaultDuration  Int               // Default duration in minutes
  setupTime        Int               @default(0) // Setup time in minutes
  requiresSkill    String?           // Optional skill requirement
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  // Relationships
  workCenter       WorkCenter        @relation(fields: [workCenterId], references: [id])
  procedures       Procedure[]
  routingSteps     RoutingStep[]
  workOrderOperations WorkOrderOperation[]
  
  @@index([workCenterId])
}

model Procedure {
  id               String            @id @default(uuid())
  operationId      String
  stepNumber       Int
  title            String
  instructions     String            @db.Text
  estimatedTime    Int               // Time in minutes
  requiredTools    String[]
  safetyNotes      String?
  qualityChecks    String[]
  imageUrls        String[]
  videoUrl         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  // Relationships
  operation        Operation         @relation(fields: [operationId], references: [id])
  
  @@unique([operationId, stepNumber])
  @@index([operationId])
}

// Routing System (for future phases)
model Routing {
  id               String            @id @default(uuid())
  partId           String
  routingNumber    String
  version          Int               @default(1)
  isActive         Boolean           @default(true)
  effectiveDate    DateTime          @default(now())
  expiryDate       DateTime?
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  // Relationships
  part             Part              @relation(fields: [partId], references: [id])
  steps            RoutingStep[]
  partRoutings     PartRouting[]
  workOrderRoutings WorkOrderRouting[]
  
  @@unique([partId, routingNumber, version])
  @@index([partId])
}

model RoutingStep {
  id               String            @id @default(uuid())
  routingId        String
  stepNumber       Int
  operationId      String
  workCenterId     String
  setupTime        Int               @default(0) // Minutes
  runTime          Int               // Minutes per unit
  queueTime        Int               @default(0) // Minutes
  moveTime         Int               @default(0) // Minutes
  notes            String?
  
  // Relationships
  routing          Routing           @relation(fields: [routingId], references: [id])
  operation        Operation         @relation(fields: [operationId], references: [id])
  workCenter       WorkCenter        @relation(fields: [workCenterId], references: [id])
  
  @@unique([routingId, stepNumber])
  @@index([routingId])
  @@index([operationId])
  @@index([workCenterId])
}

// Junction table for many-to-many relationship between Part and Routing
model PartRouting {
  id               String            @id @default(cuid())
  partId           String
  routingId        String
  isDefault        Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  // Relationships
  part             Part              @relation(fields: [partId], references: [id])
  routing          Routing           @relation(fields: [routingId], references: [id])
  
  @@unique([partId, routingId])
  @@index([partId])
  @@index([routingId])
}

// Work Order Routing - Links work orders to routing system
model WorkOrderRouting {
  id               String                @id @default(uuid())
  workOrderId      String                @unique
  routingId        String?               // Optional for backward compatibility
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  
  // Relationships
  workOrder        WorkOrder             @relation(fields: [workOrderId], references: [id], onDelete: Cascade)
  routing          Routing?              @relation(fields: [routingId], references: [id])
  operations       WorkOrderOperation[]
  
  @@index([routingId])
}

// Work Order Operation - Tracks individual operations within a work order
model WorkOrderOperation {
  id                String                @id @default(uuid())
  workOrderRoutingId String
  sequenceNumber    Int
  operationId       String
  workCenterId      String
  status            OperationStatus       @default(PENDING)
  plannedQty        Int
  completedQty      Int                   @default(0)
  scrappedQty       Int                   @default(0)
  
  // Time tracking
  plannedSetupTime  Int                   // Minutes
  plannedRunTime    Int                   // Minutes per unit
  actualSetupTime   Int?                  // Minutes
  actualRunTime     Int?                  // Minutes
  startedAt         DateTime?
  setupCompletedAt  DateTime?
  completedAt       DateTime?
  
  // Worker assignment
  assignedUserId    String?
  setupByUserId     String?
  completedByUserId String?
  
  // Additional fields
  notes             String?
  priority          Int                   @default(0)
  
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  
  // Relationships
  workOrderRouting  WorkOrderRouting      @relation(fields: [workOrderRoutingId], references: [id], onDelete: Cascade)
  operation         Operation             @relation(fields: [operationId], references: [id])
  workCenter        WorkCenter            @relation(fields: [workCenterId], references: [id])
  assignedUser      User?                 @relation("OperationAssignee", fields: [assignedUserId], references: [id])
  setupByUser       User?                 @relation("OperationSetupBy", fields: [setupByUserId], references: [id])
  completedByUser   User?                 @relation("OperationCompletedBy", fields: [completedByUserId], references: [id])
  
  @@unique([workOrderRoutingId, sequenceNumber])
  @@index([workOrderRoutingId])
  @@index([operationId])
  @@index([workCenterId])
  @@index([status])
  @@index([assignedUserId])
}

enum WorkCenterType {
  MACHINING
  ASSEMBLY
  INSPECTION
  PACKAGING
  SHIPPING
  RECEIVING
  MAINTENANCE
  OTHER
}
